export PROMPT_COMMAND='echo -en "\033[m\033[38;5;2m"$(( `sed -n "s/MemFree:[\t ]\+\([0-9]\+\) kB/\1/p" /proc/meminfo`/1024))"\033[38;5;22m/"$((`sed -n "s/MemTotal:[\t ]\+\([0-9]\+\) kB/\1/Ip" /proc/meminfo`/1024 ))MB"\t\033[m\033[38;5;55m$(< /proc/loadavg)\033[m"'
export PS1='\[\e[m\n\e[32m\][$$:$PPID\j:\!\[\e[32m\]]\[\e[0;36m\] \T \d \[\e[1;30m\][\[\e[1;34m\]\u@\H\[\e[1;30m\]:\[\e[0;37m\]${SSH_TTY} \[\e[0;32m\]+${SHLVL}\[\e[1;30m\]] \[\e[1;37m\]\w\[\e[0;37m\] \n($SHLVL:\!)\$ '

if [ -f "/workdir/.env" ]; then
    . /workdir/.env
fi

SW_TEST_URL="https://${SIGNALWIRE_SPACE}.signalwire.com/api/laml/2010-04-01/Accounts -u ${PROJECT_ID}:${REST_API_TOKEN}"
response_code=$(curl -s -o /dev/null -I -w "%{http_code}" $SW_TEST_URL )

# Define the output file
ENV_FILE="/workdir/.env"

if [[ $response_code  -eq 200 ]]; then
    echo "INFO: SignalWire Credentials work ✅"
elif [[ $response_code -eq 404 ]]; then
    echo "ERROR: SignalWire Space NOT FOUND 🧐"
    rm -f /workdir/.env
elif [[ $response_code -eq 401 ]]; then
    echo "ERROR: Signalwire Credentials DO NOT WORK 🤨"
    rm -f /workdir/.env
else
    echo  "WARNING: SignalWire setup incomplete 🛑"
    rm -f /workdir/.env
fi


if [ ! -f "/workdir/.env" ]; then
    # Display the form and collect the inputs
    {
	SIGNALWIRE_SPACE=$(whiptail --inputbox "Please enter your SignalWire Space Domain:" 8 78 --title "Input" 3>&1 1>&2 2>&3)
	exitstatus=$?
	if [ $exitstatus != 0 ]; then exit; fi

	PROJECT_ID=$(whiptail --inputbox "Please enter your Project ID:" 8 78 --title "Input" 3>&1 1>&2 2>&3)
	exitstatus=$?
	if [ $exitstatus != 0 ]; then exit; fi

	REST_API_TOKEN=$(whiptail --inputbox "Please enter your API Auth Token:" 8 78 --title "Input" 3>&1 1>&2 2>&3)
	exitstatus=$?
	if [ $exitstatus != 0 ]; then exit; fi

	NGROK_TOKEN=$(whiptail --inputbox "Please enter your NGROK Token:" 8 78 --title "Input" 3>&1 1>&2 2>&3)
	exitstatus=$?
	if [ $exitstatus != 0 ]; then exit; fi

	NGROK_ARGS=$(whiptail --inputbox "Please enter your NGROK Args:" 8 78 --title "Input" 3>&1 1>&2 2>&3)
	exitstatus=$?
	if [ $exitstatus != 0 ]; then exit; fi
    }

    # Dropdown for VISUAL using whiptail menu
    VISUAL=$(whiptail --title "Visual Editor Selection" --menu "Choose your editor" 15 60 3 \
		      "nano" "" \
		      "emacs" "" \
		      "vim" "" 3>&1 1>&2 2>&3)

    exitstatus=$?
    if [ $exitstatus != 0 ]; then exit; fi

    # Write to .env file
    {
	echo "SIGNALWIRE_SPACE=$SIGNALWIRE_SPACE"
	echo "PROJECT_ID=$PROJECT_ID"
	echo "REST_API_TOKEN=$REST_API_TOKEN"
	echo "NGROK_TOKEN=$NGROK_TOKEN"
	echo "NGROK_ARGS='$NGROK_ARGS'"
	echo "VISUAL=$VISUAL"
	echo "WORKDIR=/workdir"
    } > $ENV_FILE

    sed -i~ 's/\.signalwire.com//g' $ENV_FILE

    source $ENV_FILE

    # Confirmation message
    whiptail --title "Confirmation" --msgbox "Details saved to $ENV_FILE." 8 78

fi

if [ ! -z $NGROK_TOKEN ]; then
    echo "Starting ngrok tunnel...";
    /usr/local/bin/ngrok config add-authtoken $NGROK_TOKEN > /dev/null 2>&1
    /usr/bin/screen -dmS ngrok /usr/local/bin/ngrok http $NGROK_ARGS 9080 > /dev/null 2>&1
fi

sleep 3

export HOSTNAME=`curl -s http://127.0.0.1:4040/api/tunnels | jq -r '.tunnels[0].public_url' | sed 's/https:\/\///'`

if [ ! -z $NGROK_TOKEN ]; then
    export NGROK_URL=$( curl -s http://127.0.0.1:4040/api/tunnels | jq -r '.tunnels[0].public_url' )
    if [ ! -z $NGROK_URL ]; then
	# update the numbers that were previously mapped to an ngrok URL previously.
	python3 /usr/lib/cgi-bin/update_laml_bins.py $NGROK_URL
    fi
fi

clear
echo -e "\n\n";
cat /.sw.ans
echo -e "\n\n";
echo -e "Welcome to WireStarter!";
echo -e "\n"

if [ ! -z $NGROK_URL ]; then
    echo -e "NGROK Tunnel: $NGROK_URL";
    echo -e "/workdir/public -> $NGROK_URL/public\n";
fi

if [ ! -z $WORKDIR ]; then
    echo -e "Persistent host directory is /workdir -> $WORKDIR\n";
fi


if [ -f "/workdir/.bashrc" ]; then
   . "/workdir/.bashrc"
fi

if [  -f "/workdir/.emacs" ]; then
    ln -f -s /workdir/.emacs ~/.emacs
fi

if [  -f "/workdir/.gitconfig" ]; then
    ln -f -s /workdir/.gitconfig ~
fi

if [  -d "/workdir/.ssh" ]; then
    rm -rf ~/.ssh
    ln -f -s /workdir/.ssh ~
fi

if [  -f "/workdir/.setuppgsql" ]; then
   /usr/bin/setuppgsql
fi

# This is where the copilot token is stored
if [  -d "/workdir/github-copilot" ]; then
    cp -drp /workdir/github-copilot ~/.config/
fi

if [  -f "/workdir/cpanfile" ]; then
    mkdir -p /workdir/perllib
    cpanm -l /workdir/perllib --installdeps /workdir/
    touch /.cpandone
    export PATH=/workdir/perllib/bin:$PATH
    export PERL5LIB=/workdir/perllib/lib/perl5:$PERL5LIB

    psql() {
	command psql -U postgres "$@"
    }
fi

# Common typos when using emacs, so things just work.
if [ $VISUAL == "emacs" ]; then
    alias e='emacs'
    alias eamcs='emacs'
    alias emcas='emacs'
    alias meacs='emacs'
    alias mecas='emacs'
fi

export NVM_DIR="/opt/.nvm"

if [ -f "$NVM_DIR/nvm.sh" ]; then
    source "$NVM_DIR/nvm.sh"
fi

if [ -f "/opt/go/bin/go" ]; then
    export PATH=/opt/go/bin:${PATH}
    export GOPATH=/opt/go
fi

if [ -z $VISUAL ]; then
    export VISUAL=vim
fi

if [ ! -z $SIGNALWIRE_SPACE ] && [ ! -z $PROJECT_ID ] && [ ! -z $REST_API_TOKEN ] && [ ! -f /workdir/.noswsh ]; then
    python3 /usr/local/bin/swsh
fi
